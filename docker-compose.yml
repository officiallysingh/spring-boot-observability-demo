name: observability

services:
    # Tempo runs as user 10001, and docker compose creates the volume as root.
    # As such, we need to chown the volume in order for Tempo to start correctly.
    init:
        image: &tempoImage grafana/tempo:latest
        user: root
        entrypoint:
            - "chown"
            - "10001:10001"
            - "/var/tempo"
        volumes:
            - ./tempo-data:/var/tempo
        networks:
            - observability

    tempo:
        image: *tempoImage
        command: [ "-config.file=/etc/tempo.yml" ]
        volumes:
            - ./observability/config/tempo/tempo.yml:/etc/tempo.yml
#            - ./tempo-data:/var/tempo
        ports:
            - "3200" # tempo
            - "4317" # otlp grpc
        depends_on:
            - init
        networks:
            - observability

    grafana:
        image: grafana/grafana:11.5.1
        restart: on-failure
        command:
            - --config=/etc/grafana-config/grafana.ini
        volumes:
            - ./observability/config/grafana:/etc/grafana-config
            - ./observability/config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
            - ./observability/config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
#            - ./observability/configgrafana//alerting:/etc/grafana/provisioning/alerting:ro
        ports:
            - "3000:3000"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:3000/healthz" ]
            interval: 1s
            start_interval: 0s
            timeout: 10s
            retries: 5
        networks:
            - observability

    mimir:
        image: grafana/mimir:2.14.3
        restart: on-failure
        command:
            - -config.file=/etc/mimir-config/mimir.yml
        volumes:
            - ./observability/config/mimir/mimir.yml:/etc/mimir-config/mimir.yml
        ports:
            - "9009:9009"
        networks:
            - observability

    loki:
        image: grafana/loki:3.4.1
        restart: on-failure
        ports:
            - "3100:3100"
        networks:
            - observability

    pyroscope:
        image: grafana/pyroscope:1.5.0
        restart: on-failure
        ports:
            - "4040:4040"
        networks:
            - observability
#    beyla:
#        image: grafana/beyla:latest
#        pid: "service:goblog"
#        privileged: true
#        environment:
#            BEYLA_TRACE_PRINTER: text
#            BEYLA_OPEN_PORT: 8443
    alloy:
        image: grafana/alloy:v1.5.1
        pull_policy: always
        restart: on-failure
        volumes:
            - ./observability/config/alloy/config.alloy:/etc/alloy/config.alloy
        depends_on:
#            - beyla
            - mimir
            - loki
            - tempo
            - pyroscope
        command:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/var/lib/alloy/data
            - --server.http.listen-addr=0.0.0.0:12345
            - --stability.level=experimental # Enable all functionality
        ports:
            - "12345:12345"
            - "4318:4318"
            - "4317:4317"
        networks:
            - observability

    # Add your Spring Boot application service
#    spring-boot-observability-demo:
#        image: spring-boot-observability-demo:0.0.1
#        extra_hosts: ['host.docker.internal:host-gateway']
#        restart: on-failure
#        ports:
#            - "8090:8090"
##        environment:
##            - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
#        networks:
#            - observability

networks:
    observability:
        driver: bridge

