name: observability

services:
    grafana:
        image: grafana/grafana:11.5.1
        extra_hosts: ['host.docker.internal:host-gateway']
        restart: on-failure
        command:
            - --config=/etc/grafana-config/grafana.ini
        volumes:
            - ./observability/config/grafana:/etc/grafana-config
            - ./observability/config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
            - ./observability/config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
#            - ./observability/configgrafana//alerting:/etc/grafana/provisioning/alerting:ro
        ports:
            - "3000:3000"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:3000/healthz" ]
            interval: 1s
            start_interval: 0s
            timeout: 10s
            retries: 5
        networks:
            - observability
#        env_file:
#            # Use this optional env file to add any secrets required by data sources you can add to config/grafana/datasources
#            - path: ~/.grafana_dev_datasources
#              required: false

    mimir:
        image: grafana/mimir:2.14.3
        extra_hosts: ['host.docker.internal:host-gateway']
        restart: on-failure
        command:
            - -config.file=/etc/mimir-config/mimir.yaml
        volumes:
            - ./observability/config/mimir:/etc/mimir-config
        ports:
            - "9009:9009"
        networks:
            - observability

    loki:
        image: grafana/loki:3.4.1
        extra_hosts: ['host.docker.internal:host-gateway']
        restart: on-failure
        ports:
            - "3100:3100"
        networks:
            - observability

    tempo:
        image: grafana/tempo:2.7.0
        extra_hosts: ['host.docker.internal:host-gateway']
        restart: on-failure
        command:
            - "-storage.trace.backend=local"                  # tell tempo where to permanently put traces
            - "-storage.trace.local.path=/tmp/tempo/traces"
            - "-storage.trace.wal.path=/tmp/tempo/wal"        # tell tempo where to store the wal
            - "-auth.enabled=false"                           # disables the requirement for the X-Scope-OrgID header
            - "-server.http-listen-port=3200"
        ports:
            - "3200:3200"   # tempo
#            - "9095:9095" # tempo grpc
#            - "4317:4317"  # otlp grpc
#            - "4318:4318"  # otlp http
#        ports:
#            - "3200:3200"
#            - "4317:4317"
        networks:
            - observability

    pyroscope:
        image: grafana/pyroscope:1.5.0
        extra_hosts: ['host.docker.internal:host-gateway']
        restart: on-failure
        ports:
            - "4040:4040"
        networks:
            - observability
#    beyla:
#        image: grafana/beyla:latest
#        pid: "service:goblog"
#        privileged: true
#        environment:
#            BEYLA_TRACE_PRINTER: text
#            BEYLA_OPEN_PORT: 8443
    alloy:
        image: grafana/alloy:v1.5.1
        extra_hosts: ['host.docker.internal:host-gateway']
        pull_policy: always
#        profiles: ["alloy"]
        restart: on-failure
        volumes:
            - ./observability/config/alloy:/etc/alloy
#        environment:
#            REMOTE_WRITE_HOST: mimir:9009
#            LOKI_HOST: loki:3100
#            TEMPO_HOST: tempo:4321
#            PYROSCOPE_HOST: pyroscope:4040
        depends_on:
#            - beyla
            - mimir
            - loki
            - tempo
            - pyroscope
        command:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/var/lib/alloy/data
            - --server.http.listen-addr=0.0.0.0:12345
            - --stability.level=experimental # Enable all functionality
        ports:
            - "12345:12345"
            - "4317:4317"
            - "4318:4318"
        networks:
            - observability

    # Add your Spring Boot application service
#    spring-boot-observability-demo:
#        image: spring-boot-observability-demo:0.0.1
#        extra_hosts: ['host.docker.internal:host-gateway']
#        restart: on-failure
#        ports:
#            - "8090:8090"
##        environment:
##            - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:4318
#        networks:
#            - observability
networks:
    observability:
        driver: bridge

#volumes:
#    alloy_data:
#    grafana:
#        driver: local
#    tempo:
#        driver: local
#    alloy:
#        driver: local
#    mimir:
#        driver: local
